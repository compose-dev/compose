/**
 * A completely made up suffix that we use to make sure our autogenerated
 * routes don't conflict with user-provided routes.
 */
const AUTOGEN_SUFFIX = "auto-suffix";

function addAutoGenerationSuffix(name: string) {
  return `${name}-${AUTOGEN_SUFFIX}`;
}

/**
 * Format a user-provided route to be used as a Compose route.
 *
 * - Trim leading/trailing spaces
 * - Replace other spaces with hypens
 * - Remove leading slashes
 * - Convert to lowercase
 *
 * @param route - The user-provided route.
 * @returns The formatted route.
 */
function formatRoute(route: string) {
  return route.trim().replaceAll(" ", "-").replace(/^\/+/, "").toLowerCase();
}

function isRouteValid(route: string) {
  if (!route || typeof route !== "string") {
    throw new Error("Invalid variable type for route, should be a string");
  }

  if (route.startsWith("-") || route.endsWith("-")) {
    throw new Error("Routes cannot start or end with a hyphen");
  }

  if (route.length > 250) {
    throw new Error("Routes cannot be longer than 250 characters");
  }

  const validChars = new Set("abcdefghijklmnopqrstuvwxyz0123456789-");

  if (!route.split("").every((char) => validChars.has(char))) {
    throw new Error(
      "Routes can only contain lowercase alphanumeric characters and hyphens"
    );
  }

  return true;
}

export {
  AUTOGEN_SUFFIX,
  addAutoGenerationSuffix,
  formatRoute as format,
  isRouteValid as isValid,
};
