const STATUS = {
  PENDING: "PENDING",
  WONT_FIX: "WONT_FIX",
  RESOLVED: "RESOLVED",
};

type Status = (typeof STATUS)[keyof typeof STATUS];

const ENTRY_TYPE = {
  SUBSCRIPTION_CREATION_FAILURE_FOR_NEW_USER:
    "SUBSCRIPTION_CREATION_FAILURE_FOR_NEW_USER",
  COMPANY_NOT_FOUND_FOR_USER_SETUP_BILLING_ROUTE:
    "COMPANY_NOT_FOUND_FOR_USER_SETUP_BILLING_ROUTE",
  NO_BILLING_ID_FOR_COMPANY: "NO_BILLING_ID_FOR_COMPANY",
  FAILED_TO_CREATE_USER: "FAILED_TO_CREATE_USER",
  UNCATEGORIZED: "UNCATEGORIZED",
  PERMISSION_NOT_FOUND_FOR_INVITE_CODE: "PERMISSION_NOT_FOUND_FOR_INVITE_CODE",
  FAILED_TO_CREATE_DEVELOPMENT_ENVIRONMENT:
    "FAILED_TO_CREATE_DEVELOPMENT_ENVIRONMENT",
  ONBOARDING_ISSUE_REPORT: "ONBOARDING_ISSUE_REPORT",
} as const;

type EntryType = (typeof ENTRY_TYPE)[keyof typeof ENTRY_TYPE];

interface BaseData {
  type: EntryType;
}

type Data = BaseData & Record<string, unknown>;

interface ErrorLogDB {
  id: string;
  createdAt: Date;
  data: Data;
  status: Status;
}

export { ErrorLogDB as DB, STATUS, ENTRY_TYPE };
